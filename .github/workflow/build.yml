name: CI / CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write
  id-token: write
  issues: write

env:
  JAR_NAME: target/*.jar

jobs:
  build-and-test:
    name: Build, Test, Package
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d testdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      rabbitmq:
        image: rabbitmq:3.11-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Cache .m2
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Wait for DB & RabbitMQ
        run: |
          # Wait for Postgres
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U postgres -d testdb && break
            sleep 2
          done
          # Wait for RabbitMQ
          for i in {1..30}; do
            docker run --rm --network host curlimages/curl:7.86.0 curl -sS http://localhost:15672 || true
            nc -z localhost 5672 && break
            sleep 2
          done

      - name: Run unit & integration tests, package
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
          RABBITMQ_URI: amqp://guest:guest@localhost:5672
        run: |
          mvn -B -U -e clean test package -DskipITs=false

      - name: Upload artifact (jar)
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-jar
          path: target/*.jar

